#%RAML 1.0
title: G8OS Stateless GRID
version: v0.1.0
mediaType:  application/json

types:

  Node:
    type: object
    description: Node node in the g8os grid
    properties:
      id: string
      hostname: string

  CPUInfo:
    type: object
    description: Information about physical CPUs
    properties:
      cacheSize: integer
      cores: integer
      family: string
      flags: string[]
      mhz: integer

  MemInfo:
    type: object
    description: Information about memory
    properties:
      active: integer
      available: integer
      buffers: integer
      cached: integer
      free: integer
      inactive: integer
      total: integer
      used: integer
      usedPercent: number
      wired: integer

  OSInfo:
    type: object
    description: Information on the operating system
    properties:
      bootTime: integer
      hostname: string
      os: string
      platform: string
      platformFamily: string
      platformVersion: string
      procs: integer
      uptime: integer
      virtualizationRole: string
      virtualizationSystem: string

  NicInfo:
    type: object
    description: Information about network interface
    properties:
      addrs:
        type: string[]
        description: List of IP Addresses
      flags: string[]
      hardwareaddr:
        type: string
        description: Hardware address of network interface
      mtu: integer
      name: string

  DiskInfo:
    type: object
    description: Information about DiskInfo
    properties:
      device:
        type: string
        description: Name of the device
      fstype:
        type: string
        description: Type of filesystem
      mountpoint:
        type: string
        description: Mountpoint of the device
      opts:
        type: string
        description: Mount options

  DiskExtInfo:
    type: object
    description: Extended disk information. See https://github.com/karelzak/util-linux/blob/master/misc-utils/lsblk.c#L156
    properties:
      alignment: integer
      discAln: integer
      discGran: integer
      discMax: integer
      discZero: integer
      fstype: string
      group: string
      hctl: string
      hotplug: integer
      kname: string
      label: string
      logSec: integer
      maj_min: string
      minIO: integer
      mode: string
      model: string
      mountpoint: string
      name: string
      optIO: integer
      owner: string
      partflags: string
      partlabel: string
      parttype: integer
      partuuid: string
      phySec: integer
      pkname: string
      ra: integer
      rand: integer
      rev: string
      rm: integer
      ro: integer
      rota: integer
      rqSize: integer
      sched: string
      serial: string
      size: integer
      state: string
      subsystems: string
      tran: string
      type: string
      uuid: string
      vendor: string
      wsame: integer
      wwn: string

  BridgeCreate:
    type: object
    description: Arguments for a bridge.create job
    properties:
      name:
        description: Name for the bridge to be created
        type: string
      hwaddr:
        description: Macaddress for the bridge to be created
        type: string
        required: false

  Job:
    type: object
    description: Job that is be executed in the Node/Container. More information can be found here https://github.com/g8os/node/blob/master/docs/commands.md
    properties:
      id:
        description: A unique id for the job with which later on results can be retrieved. If not supplied an id will be generated.
        type: string
      queue:
        description: Name of the queue in which this job was be enqued.
        type: string
      tags:
        description: Metadata that is be submitted together with the job and is returned with the result.
        type: string
      statsInterval:
        description: Stats gathering interval.
        default: 0
        type: integer
      maxTime:
        description: Max run time of the job, if exceeded job will be killed
        default: 0
        type: integer
      maxRestart:
        description: Max number of retries to start the job if failed before giving up.
        default: 0
        type: integer
      recurringPeriod:
        description: If provided job is executed every X seconds.
        default: 0
        type: integer
      logLevels:
        description: Log levels to store locally and not discard.
        type: integer[]
        default: [0]

  WriteFile:
    type: object
    displayName: Writes a file in the targetted system
    properties:
      path:
        displayName: Path on the target system where the file should be written
        type: string
      contents:
        displayName: Contents of the file that should be written
        type: string

  DeleteFile:
    type: object
    displayName: Removes a file in the targetted system
    properties:
      path:
        displayName: Path on the target system where the file should be written
        type: string

  Process:
    type: object
    properties:
      cmd: Job
      cpu: number
      debug: string
      rss: number
      swap: number
      vms: number

  VDiskLink:
    type: object
    description: Definition of a virtual disk
    properties:
      maxIOps:
        description: Maximum amount of iops the virtual disk should deliver
        type: integer
      url:
        description: File path to the NBD unix domain socket
        type: string

  VM:
    type: object
    properties:
      name: string
      memory:
        description: Amount of memory in MiB
        type: integer
      cpu:
        description: Number of virtual CUPs
        type: integer
      nic:
        description: |
          List of nic specifications.
          Possible formats:
          - "VxLAN:<<VxLAN id>>"
            eg "VxLAN:200" Attaches the nic to VxLan 200
          - "Zerotier:<<Zerotier network id>>"
            eg "Zerotier:fsjyhgu76fsd87ydzf86t7dfygis" Attaches the noc to Zeroteir network fsjyhgu76fsd87ydzf86t7dfygis
        type: string[]
      disk:
        description: List of virtual disks
        type: VDiskLink[]

  Bridge:
    type: object
    properties:
       name:
         description: Name of the bridge
         type: string
       config:
         description: |
            '' or 'none':
              no IP is gonna be set on the link
            'dhcp':
              Run `udhcpc` on the container link, of course this will
              only work if the `bridge` is created with `dnsmasq` networking
            'CIDR':
              Assign static IP to the link
         type: string

  Container:
    type: object
    properties:
      id:
        description: identifier
        type: string
      hostname:
        description: Hostname for the Container
        type: string
      plist:
        type: string
        description: Url to the root filesystem plist
      mounts:
        description: |
          List of host directory to container directory mappings (Node to Container)
          eg: /mnt/volume34:/var
        type: string[]
      zerotier:
        description: Zerotier network id
        type: string
        required: false
      bridges:
        type: Bridge[]
        description: Bridge mapping
      ports:
        type: string[]
        description: |
          List of node to container post mappings.
          eg: 8080:80

  Location:
    type: object
    description: Url to object details
    properties:
      url:
        description: Url to object details
        type: string
      id:
        description: Object id
        type: string
      name:
        description: Object name
        type: string

  JobResult:
    type: object
    description: Result object of a job
    properties:
      id:
        description: The unique identifier for the job
        type: string
      name:
        description: The kind of job to which this result belongs to.
        enum: ['core.ping', 'core.system', 'core.kill', 'core.killall',
               'core.state', 'core.reboot', 'info.cpu', 'info.disk',
               'info.mem', 'info.nic', 'info.os', 'container.create',
               'container.list', 'container.dispatch', 'container.terminate',
               'bridge.create', 'bridge.list', 'bridge.delete',
               'disk.list', 'disk.mktable', 'disk.mkpart', 'disk.rmpart',
               'disk.mount', 'disk.umount', 'btrfs.create', 'btrfs.list',
               'btrfs.subvol_create', 'btrfs.subvol_list', 'btrfs.subvol_delete']
      level:
        description: 20 means that the data is json serialized object
        type: string
      starttime:
        description: Epoch timestamp when the job was started
        type: integer
      stdout:
        type: string
        description: Stdout of process/job
      stderr:
        type: string
        description: Stderr of process/job
      state:
        description: Status of the job
        enum: ['SCHEDULED', 'RUNNING', 'SUCCESS', 'KILLED', 'KILLED_TIMEOUT', 'FAILED']
      data:
        description: The result of executing the job
        type: string

  CoreStateResult:
    type: object
    description: Result of a core.state command
    properties:
      cpu:
        description: percentage cpu used in a node
        type: integer
      rss: integer
      vms: integer
      swap: integer

  ZeroTierRoute:
    type: object
    description: Zerotier route
    properties:
      flags: integer
      metric: integer
      target: string
      via: string

  ZeroTier:
    type: object
    description: Zerotier details
    properties:
      allowDefault: boolean
      allowGlobal: boolean
      allowManaged: boolean
      assignedAddresses: string[]
      bridge: boolean
      broadcastEnabled: boolean
      dhcp: boolean
      mac: string
      mtu: integer
      name: string
      netconfRevision: integer
      nwid: string
      portDeviceName: string
      portError: integer
      routes: ZeroTierRoute[]
      status: string
      type:
        enum: ['PUBLIC', 'PRIVATE']

  CoreSystem:
    type: object
    description: Arguments for a core.system command
    properties:
      name:
        description: Name of the executable that needs to be run
        type: string
      pwd:
        description: Directory in which the process needs to be started
        type: string
        required: false
      args:
        description: List of commandline arguments
        type: string[]
        required: false
      environment:
        description: |
          Environment variables for the process.
          eg: PATH=/usr/bin/local
        type: string[]
        required: false
      stdin:
        description: Data that needs to be passed into the stdin of the started process
        type: string
        required: false

/node:
  description: Nodes
  get:
    description: List Nodes
    displayName: ListNodes
    responses:
      200:
        body:
          application/json:
            type: Location[]
  /{nodeid}:
    get:
      description: Get detailed information of a node
      displayName: GetNode
      responses:
        200:
          body:
            application/json:
              type: Node
    /job:
      description: Jobs for this Node
      get:
        displayName: ListNodeJobs
        description: List running jobs
        responses:
          200:
            body:
              application/json:
                type: Location[]
      delete:
        displayName: KillAllNodeJobs
        description: Kills all running jobs
        responses:
          200:
            body:
              application/json:
                type: Location
      /{jobid}:
        get:
          displayName: GetNodeJob
          description: Get details of a submitted job
          responses:
            200:
              body:
                application/json:
                  type: JobResult
        delete:
          displayName: KillNodeJob
          description: Kills the job
          responses:
            200:
              body:
                application/json:
                  type: Location
    /ping:
      post:
        displayName: PingNode
        description: Ping this node
        responses:
          200:
            body:
              application/json:
                type: Location
    /state:
      get:
        displayName: GetNodeState
        description: The aggregated consumption of node + all processes (cpu, memory, etc...)
        responses:
          200:
            body:
              application/json:
                type:
                  CoreStateResult
    /reboot:
      post:
        displayName: RebootNode
        description: Immediately reboot the machine.
        responses:
          200:
            body:
              application/json:
                type: Location
    /cpu:
      get:
        displayName: GetCPUInfo
        description: Get detailed information of all CPUs in the node
        responses:
          200:
            body:
              application/json:
                type: CPUInfo[]
    /disk:
      get:
        displayName: GetDiskInfo
        description: Get detailed information of all the disks in the node
        responses:
          200:
            body:
              application/json:
                type: DiskInfo[]
    /mem:
      get:
        displayName: GetMemInfo
        description: Get detailed information about the memory in the node
        responses:
          200:
            body:
              application/json:
                type: MemInfo
    /nic:
      get:
        displayName: GetNicInfo
        description: Get detailed information about the network interfaces in the node
        responses:
          200:
            body:
              application/json:
                type: NicInfo[]
    /os:
      get:
        displayName: GetNodeOSInfo
        description: Get detailed information of the os of the node
        responses:
          200:
            body:
              application/json:
                type: OSInfo
    /process:
       get:
         displayName: ListNodeProcesses
         description: Get Processes
         responses:
           200:
             body:
               application/json:
                 type: Location[]
       /{proccessid}:
         get:
           displayName: GetNodeProcess
           description: Get process details
           responses:
             200:
               body:
                 application/json:
                   type: Process
         delete:
           displayName: KillNodeProcess
           description: Kill Process
           responses:
             200:
               body:
                 application/json:
                   type: Location
    /bridge:
      post:
        displayName: CreateBridge
        description: Creates a new bridge
        body:
          application/json:
            type: BridgeCreate
        responses:
          200:
            body:
              application/json:
                type: Location
      get:
        displayName: ListBridges
        description: List bridges
        responses:
          200:
            body:
              application/json:
                type: Location[]
      /{bridgeid}:
        get:
          displayName: GetBridge
          description: Get bridge details
          responses:
            200:
              body:
                application/json:
                  type: Bridge
        delete:
          displayName: DeleteBridge
          description: Remove bridge
          responses:
            200:
              body:
                application/json:
                  type: Location
    /storagepool:
      get:
        description: List storage pools present in the node
      post:
        description: Create a new storage pool
      /{storagepoolid}:
        get:
          description: Get detailed information of this storage pool
        post:
          description: Add extra devices to this storage pool
        delete:
          description: Delete the storage pool
        /devices:
          get:
            description: Lists the devices in the storage pool
          /{deviceid}:
            get:
              description: Get detailed information on the device
            delete:
              description: Removes the device from the storagepool
        /volumes:
          get:
            description: List volumes
          post:
            description: Create a new volume
          /{volumeid}:
            get:
              description: Get detailed volume information
            delete:
              description: Delete volume
            /snapshot:
              post:
                description: Create a new readonly volume of the current state of the volume
            /clone:
              post:
                description: Create a new writable volume that starts with the current state of the volume
            /children:
              get:
                description: List child volumes of this volume
    /zerotier:
      get:
        displayName: ListZerotier
        description: List running zerotier networks
        responses:
          200:
            body:
              application/json:
                type: Location[]
      /{zerotierid}:
        get:
          displayName: GetZerotier
          description: Get zerotier network details
          responses:
            200:
              body:
                application/json:
                  type: ZeroTier
        post:
          displayName: JoinZerotier
          description: Join zerotier network
          responses:
            200:
              body:
                application/json:
                  type: Location
        delete:
          displayName: ExitZerotier
          description: Exit the Zerotier network
          responses:
            200:
              body:
                application/json:
                  type: Location
    /container:
      get:
        displayName: ListContainers
        description: List running Containers
        responses:
          200:
            body:
              application/json:
                type: Location[]
      post:
        displayName: CreateContainer
        description: Create a new Container
        body:
          application/json:
            type: Container
        responses:
          200:
            body:
              application/json:
                type: Location
      /{containerid}:
        delete:
          displayName: DeleteContainer
          description: Delete Container instance
          responses:
            200:
              body:
                application/json:
                  type: Location
        get:
          displayName: GetContainer
          description: Get Container
          responses:
            200:
              body:
                application/json:
                  type: Container
        /filesystem:
          post:
            description: Upload file to container
            displayName: FileUpload
            queryString:
              properties:
                path: string
            body:
              multipart/form-data:
                properties:
                  file:
                    type: file
                    required: true
                    description: the file to upload
            responses:
              200:
                body:
                  application/json:
                    type: Location
          get:
            description: Download file from container
            displayName: FileDownload
            queryString:
              properties:
                path: string
            responses:
              200:
                body:
                  application/octet-stream:
          delete:
            description: Delete file from container
            displayName: FileDelete
            body:
              application/json:
                type: DeleteFile
            responses:
              200:
                body:
                  application/json:
                    type: Location
        /job:
          get:
            displayName: ListContainerJobs
            description: List running jobs on the container
            responses:
              200:
                body:
                  application/json:
                    type: Location[]
          delete:
            displayName: KillAllContainerJobs
            description: Kills all running jobs on the container
            responses:
              200:
                body:
                  application/json:
                    type: Location
          /{jobid}:
            get:
              displayName: GetContainerJob
              description: Get details of a submitted job on the container
              responses:
                200:
                  body:
                    application/json:
                      type: JobResult
            delete:
              displayName: KillContainerJob
              description: Kills the job
              responses:
                200:
                  body:
                    application/json:
                      type: Location
        /ping:
          post:
            displayName: PingContainer
            description: Ping this container
            responses:
              200:
                body:
                  application/json:
                    type: Location
        /state:
          get:
            displayName: GetContainerState
            description: The aggregated consumption of container + all processes (cpu, memory, etc...)
            responses:
              200:
                body:
                  application/json:
                    type:
                      CoreStateResult
        /os:
          get:
            displayName: GetContainerOSInfo
            description: Get detailed information of the container os
            responses:
              200:
                body:
                  application/json:
                    type: OSInfo
        /process:
           get:
             displayName: ListContainerProcesses
             description: Get running processes in this container
             responses:
               200:
                 body:
                   application/json:
                     type: Location[]
           post:
             displayName: StartContainerProcess
             description: Start a new process in this container
             body:
               application/json:
                 type: CoreSystem
             responses:
               200:
                 body:
                   application/json:
                     type: Location
           /{proccessid}:
             get:
               displayName: GetContainerProcess
               description: Get process details
               responses:
                 200:
                   body:
                     application/json:
                       type: Process
             delete:
               displayName: KillContainerProcess
               description: Kill Process
               responses:
                 200:
                   body:
                     application/json:
                       type: Location
    /vm:
      get:
        description: List running VMs
        displayName: ListVMs
        responses:
          200:
            body:
              application/json:
                type: Location[]
      post:
        description: Starts the VM
        displayName: StartVM
        body:
          application/json:
            type: VM
        responses:
          200:
            body:
              application/json:
                type: Location
      /{vmid}:
        delete:
          displayName: StopVM
          description: Stops the VM
          responses:
            200:
              body:
                application/json:
                  type: Location
        get:
          displayName: GetVM
          description: Get detailed virtual machine object
          responses:
            200:
              body:
                application/json:
                  type: VM
